* UI
** Interface tweaks
#+begin_src emacs-lisp
    ;; -*- coding: utf-8; lexical-binding: t -*-
    (unless (package-installed-p 'use-package)
	    (package-refresh-contents)
	    (package-install 'use-package))

    (setq inhibit-startup-message t)
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (scroll-bar-mode -1)
    (setq visible-bell 1)
    (fset 'yes-or-no-p 'y-or-n-p)
    (set-charset-priority 'unicode)
    (prefer-coding-system 'utf-8)
    (set-default-coding-systems 'utf-8)
    (set-language-environment "UTF-8")
    (set-selection-coding-system 'utf-8)
    '(keyboard-coding-system 'utf-8)

  ;;Refresh Buffer
    (global-set-key (kbd "<f5>") 'revert-buffer)
    (global-hl-line-mode t)
  #+end_src
** Autosaves and backups
#+begin_src emacs-lisp
  ; Put autosave files (ie #foo#) and backup files (ie foo~) in ~/.emacs.d/.
(custom-set-variables
  '(auto-save-file-name-transforms '((".*" "~/.emacs.d/autosaves/\\1" t)))
  '(backup-directory-alist '((".*" . "~/.emacs.d/backups/"))))

;; create the autosave dir if necessary, since emacs won't.
(make-directory "~/.emacs.d/autosaves/" t)

#+end_src
** Themes
#+begin_src emacs-lisp
  (load-theme 'tango-dark t)
  ;; (use-package doom-themes
  ;; :ensure t
  ;; :config
  ;; ;; Global settings (defaults)
  ;; (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
  ;;       doom-themes-enable-italic t) ; if nil, italics is universally disabled
  ;; (load-theme 'doom-miramare t)

  ;; ;; Enable flashing mode-line on errors
  ;; (doom-themes-visual-bell-config)
  ;; ;; Enable custom neotree theme (all-the-icons must be installed!)
  ;; (doom-themes-neotree-config)
  ;; ;; or for treemacs users
  ;; (setq doom-themes-treemacs-theme "doom-opera") ; use "doom-colors" for less minimal icon theme
  ;; (doom-themes-treemacs-config)
  ;; ;; Corrects (and improves) org-mode's native fontification.
  ;; (doom-themes-org-config))
#+end_src

** Fonts
#+BEGIN_SRC emacs-lisp
 ;; (add-to-list 'default-frame-alist '(font . "Source Code Pro"))
 ;; (add-to-list 'default-frame-alist '(fullscreen . maximized))
 ;; (set-face-attribute 'default nil :height 100)
  (set-face-attribute 'default nil :font "Source Code Pro" :height 100)
  (set-face-attribute 'variable-pitch nil :font "SF Mono-12")
#+END_SRC




* Packages

* Programming
** Configuring modes for extensions 
#+begin_src emacs-lisp
	  ;;Add extensions
	  (setq auto-mode-alist
		(append
		 '(("\\.cpp$"   . c++-mode)
		  ("\\.hpp$"    . c++-mode)
		  ("\\.c$"      . c++-mode)
		  ("\\.h$"      . c++-mode)
		  ("\\.inl$"    . c++-mode)
		  ("\\.hpp$"    . c++-mode)
		  ("\\.txt$"    . indented-text-mode)
		  ("\\.lua$"    . lua-mode))
		 auto-mode-alist))
#+end_src
** C++ Mode
#+begin_src emacs-lisp
  (require 'cc-mode)

   (defconst ry-c-style
   '((c-electric-pound-behavior . nil)
    (c-tab-always-indent       . t)
    (c-hanging-braces-alist    . ((class-open)
				     (class-close)
				     (defun-open)
				     (defun-close)
				     (inline-open)
				     (inline-close)
				     (brace-list-open)
				     (brace-list-close)
				     (brace-list-intro)
				     (brace-list-entry)
				     (block-open)
				     (block-close)
				     (substatement-open)
				     (state-case-open)
				     (class-open)))
     (c-hanging-colons-alist    . ((inher-intro)
				  (case-label)
				  (label)
				  (access-label)
				  (access-key)
				  (member-init-intro)))
     (c-cleanup-list            . (scope-operator
				  list-close-comma
				  defun-close-semi))
     (c-offsets-alist           . ((arglist-close         . c-lineup-arglist)
				  (label                 . -4)
				  (access-label          . -4)
				  (substatement-open     . 0)
				  (statement-case-intro  . 0)
				  (statement-case-open   . 4)
				  (statement-block-intro . c-lineup-for)
				  (block-open            . c-lineup-assignments)
				  (statement-cont        . (c-lineup-assignments 4))
				  (inexpr-class          . c-lineup-arglist-intro-after-paren)
				  (case-label            . 4)
				  (block-open            . 0)
				  (inline-open           . 0)
				  (innamespace           . 0)
				  (topmost-intro-cont    . 0) ; recently changed
				  (knr-argdecl-intro     . -4)
				  (brace-entry-open      . c-lineup-assignments)
				  (brace-list-open       . (c-lineup-arglist-intro-after-paren c-lineup-assignments))
				  (brace-list-open       . (c-lineup-assignments 0))
				  (brace-list-open	 . 0)
				  (brace-list-intro      . 4)
				  (brace-list-entry      . 0)
				  (brace-list-close      . 0)))
	  (c-echo-syntactic-information-p . t))
	  "ry-c-style")

  (defun ry-c-style-hook-notabs ()
	  (c-add-style "ryc" ry-c-style t)
	  (setq tab-width 4)
	  (c-set-offset 'innamespace 0)
	  (c-toggle-auto-hungry-state 1)
	  (setq c-hanging-semi&comma-criteria '((lambda () 'stop)))
	  (setq electric-pair-inhibit-predicate
		(lambda (c)
		  (if (char-equal c ?\') t (electric-pair-default-inhibit c))))
	  (sp-pair "'" nil :actions :rem)
	  (setq sp-highlight-pair-overlay nil)
	  (defadvice align-regexp (around align-regexp-with-spaces activate)
	    (let ((indent-tabs-mode nil))
	      ad-do-it)))

	(defun psj-c-style-gl ()
	(setq indent-tabs-mode 'only)
	(defadvice align-regexp (around align-regexp-with-spaces activate)
	  (let ((indent-tabs-mode nil))
	    ad-do-it)))

  (defun my-move-function-up ()
      "Move current function up."
      (interactive)
      (save-excursion
	(c-mark-function)
	(let ((fun-beg (point))
	      (fun-end (mark)))
	  (transpose-regions (progn
			       (c-beginning-of-defun 1)
			       (point))
			     (progn
			       (c-end-of-defun 1)
			       (point))
			     fun-beg fun-end))))

  (defun my-move-function-down ()
      "Move current function down."
      (interactive)
      (save-excursion
	(c-mark-function)
	(let ((fun-beg (point))
	      (fun-end (mark)))
	  (transpose-regions fun-beg fun-end
			     (progn
			       (c-beginning-of-defun -1)
			       (point))
			     (progn
			       (c-end-of-defun 1)
			       (point))))))


  (add-hook 'c-mode-common-hook 'ry-c-style-hook-notabs)
  (add-hook 'c-mode-common-hook 'psj-c-style-gl)
  (add-hook 'c-mode-hook 'display-line-numbers-mode)
  (add-hook 'c++-mode-hook 'display-line-numbers-mode)
  (add-hook 'c-mode-common-hook #'rainbow-delimiters-mode)
  ;;Disable word wrapping
  (add-hook 'c-mode-common-hook 'toggle-truncate-lines nil)
  ;;TODO: This messes up previous tab setup
  ;; jump between .cpp and .h
  (add-hook 'c-mode-common-hook
	    (lambda() 
	      (local-set-key  (kbd "C-c m d") 'ff-find-other-file)))


#+end_src



* Org Mode
#+begin_src emacs-lisp
  (require 'org-tempo)
  (use-package org
    :hook ((org-mode . visual-line-mode) (org-mode . pt/org-mode-hook))
    :hook ((org-src-mode . display-line-numbers-mode)
	   (org-src-mode . pt/disable-elisp-checking))
    :bind (("C-c o c" . org-capture)
	   ("C-c o a" . org-agenda)
	   ("C-c o A" . consult-org-agenda)
	   :map org-mode-map
	   ("M-<left>" . nil)
	   ("M-<right>" . nil)
	   ("C-c c" . #'org-mode-insert-code)
	   ("C-c a f" . #'org-shifttab)
	   ("C-c a S" . #'zero-width))
    :custom
    (org-adapt-indentation nil)
    (org-directory "~/txt")
    (org-special-ctrl-a/e t)

    (org-default-notes-file (concat org-directory "/notes.org"))
    (org-return-follows-link t)
    (org-src-ask-before-returning-to-edit-buffer nil "org-src is kinda needy out of the box")
    (org-src-window-setup 'current-window)
    (org-agenda-files (list (concat org-directory "/todo.org")))
    (org-pretty-entities t)

    :config
    (defun pt/org-mode-hook ())
    (defun make-inserter (c) '(lambda () (interactive) (insert-char c)))
    (defun zero-width () (interactive) (insert "â€‹"))

    (defun pt/disable-elisp-checking ()
      (flymake-mode nil))
    (defun org-mode-insert-code ()
      "Like markdown-insert-code, but for org instead."
      (interactive)
      (org-emphasize ?~)))

  (use-package org-modern
    :ensure t
    :config (global-org-modern-mode)
    :custom (org-modern-variable-pitch nil))

  (use-package org-superstar
    :ensure t
    :hook (org-mode . org-superstar-mode)
    :config (org-superstar-configure-like-org-bullets))

  (setq org-src-tab-acts-natively t)
      #+end_src

* Window Management
#+begin_src emacs-lisp
;;window management
(global-set-key (kbd "M-<right>") 'windmove-right)
(global-set-key (kbd "M-<left>") 'windmove-left)
(global-set-key (kbd "M-<up>") 'windmove-up)
(global-set-key (kbd "M-<down>") 'windmove-down)
#+end_src
